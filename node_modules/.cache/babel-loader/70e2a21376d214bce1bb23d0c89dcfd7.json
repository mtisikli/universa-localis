{"ast":null,"code":"import _classCallCheck from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/macbookpro/Desktop/first-project/client/src/components/TextFields/Artists.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport Autosuggest from \"react-autosuggest\";\nimport \"./Main.css\";\nimport { suggestions } from \"./Suggestions\";\nimport { artistUpdate } from \"../../Actions/formActions/formActions\";\n\nvar getSuggestions = function getSuggestions(value) {\n  var inputValue = value.trim().toLowerCase();\n  var inputLength = inputValue.length;\n  return inputLength === 0 ? [] : suggestions(suggestion).filter(function (suggestion) {\n    return suggestion.name.toLowerCase().slice(0, inputLength) === inputValue;\n  });\n};\n\nvar getSuggestionValue = function getSuggestionValue(suggestion) {\n  return suggestion.name;\n};\n\nvar renderSuggestion = function renderSuggestion(suggestion) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, suggestion.name);\n};\n\nvar Artists =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Artists, _React$Component);\n\n  function Artists() {\n    var _this;\n\n    _classCallCheck(this, Artists);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Artists).call(this));\n\n    _this.onChange = function (event, _ref) {\n      var newValue = _ref.newValue;\n\n      _this.setState({\n        value: newValue\n      });\n    };\n\n    _this.onSuggestionsFetchRequested = function (_ref2) {\n      var value = _ref2.value;\n\n      _this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    _this.onSuggestionsClearRequested = function () {\n      _this.setState({\n        suggestions: []\n      });\n    };\n\n    _this.state = {\n      value: \"\",\n      suggestions: []\n    };\n    return _this;\n  }\n\n  _createClass(Artists, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions; // Autosuggest will pass through all these props to the input.\n\n      var inputProps = {\n        placeholder: \"Search Artist\",\n        value: value,\n        onChange: this.onChange\n      }; // Finally, render it!\n\n      return React.createElement(Autosuggest, {\n        required: true,\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        inputProps: inputProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Artists;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    artist: state.form.artist\n  };\n};\n\nvar connectedArtist = connect(mapStateToProps)(Artists);\nexport default connectedArtist;","map":{"version":3,"sources":["/Users/macbookpro/Desktop/first-project/client/src/components/TextFields/Artists.js"],"names":["React","connect","Autosuggest","suggestions","artistUpdate","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","suggestion","filter","name","slice","getSuggestionValue","renderSuggestion","Artists","onChange","event","newValue","setState","onSuggestionsFetchRequested","onSuggestionsClearRequested","state","inputProps","placeholder","Component","mapStateToProps","artist","form","connectedArtist"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAO,YAAP;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,YAAT,QAA6B,uCAA7B;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK,EAAI;AAC9B,MAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,WAAb,EAAnB;AACA,MAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AAEA,SAAOD,WAAW,KAAK,CAAhB,GACH,EADG,GAEHP,WAAW,CAACS,UAAD,CAAX,CAAwBC,MAAxB,CACE,UAAAD,UAAU;AAAA,WACRA,UAAU,CAACE,IAAX,CAAgBL,WAAhB,GAA8BM,KAA9B,CAAoC,CAApC,EAAuCL,WAAvC,MAAwDH,UADhD;AAAA,GADZ,CAFJ;AAMD,CAVD;;AAYA,IAAMS,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAJ,UAAU;AAAA,SAAIA,UAAU,CAACE,IAAf;AAAA,CAArC;;AACA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAL,UAAU;AAAA,SAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,UAAU,CAACE,IAAjB,CAAJ;AAAA,CAAnC;;IAEMI,O;;;;;AACJ,qBAAc;AAAA;;AAAA;;AACZ;;AADY,UAQdC,QARc,GAQH,UAACC,KAAD,QAAyB;AAAA,UAAfC,QAAe,QAAfA,QAAe;;AAClC,YAAKC,QAAL,CAAc;AACZhB,QAAAA,KAAK,EAAEe;AADK,OAAd;AAGD,KAZa;;AAAA,UAgBdE,2BAhBc,GAgBgB,iBAAe;AAAA,UAAZjB,KAAY,SAAZA,KAAY;;AAC3C,YAAKgB,QAAL,CAAc;AACZnB,QAAAA,WAAW,EAAEE,cAAc,CAACC,KAAD;AADf,OAAd;AAGD,KApBa;;AAAA,UAuBdkB,2BAvBc,GAuBgB,YAAM;AAClC,YAAKF,QAAL,CAAc;AACZnB,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KA3Ba;;AAEZ,UAAKsB,KAAL,GAAa;AACXnB,MAAAA,KAAK,EAAE,EADI;AAEXH,MAAAA,WAAW,EAAE;AAFF,KAAb;AAFY;AAMb;;;;6BAuBQ;AAAA,wBACwB,KAAKsB,KAD7B;AAAA,UACCnB,KADD,eACCA,KADD;AAAA,UACQH,WADR,eACQA,WADR,EAGP;;AACA,UAAMuB,UAAU,GAAG;AACjBC,QAAAA,WAAW,EAAE,eADI;AAEjBrB,QAAAA,KAAK,EAALA,KAFiB;AAGjBa,QAAAA,QAAQ,EAAE,KAAKA;AAHE,OAAnB,CAJO,CAUP;;AACA,aACE,oBAAC,WAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,WAAW,EAAEhB,WAFf;AAGE,QAAA,2BAA2B,EAAE,KAAKoB,2BAHpC;AAIE,QAAA,2BAA2B,EAAE,KAAKC,2BAJpC;AAKE,QAAA,kBAAkB,EAAER,kBALtB;AAME,QAAA,gBAAgB,EAAEC,gBANpB;AAOE,QAAA,UAAU,EAAES,UAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAWD;;;;EApDmB1B,KAAK,CAAC4B,S;;AAuD5B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAJ,KAAK,EAAI;AAC/B,SAAO;AACLK,IAAAA,MAAM,EAAEL,KAAK,CAACM,IAAN,CAAWD;AADd,GAAP;AAGD,CAJD;;AAMA,IAAME,eAAe,GAAG/B,OAAO,CAAC4B,eAAD,CAAP,CAAyBX,OAAzB,CAAxB;AACA,eAAec,eAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Autosuggest from \"react-autosuggest\";\nimport \"./Main.css\";\nimport { suggestions } from \"./Suggestions\";\nimport { artistUpdate } from \"../../Actions/formActions/formActions\";\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0\n    ? []\n    : suggestions(suggestion).filter(\n        suggestion =>\n          suggestion.name.toLowerCase().slice(0, inputLength) === inputValue\n      );\n};\n\nconst getSuggestionValue = suggestion => suggestion.name;\nconst renderSuggestion = suggestion => <div>{suggestion.name}</div>;\n\nclass Artists extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\",\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: \"Search Artist\",\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    return (\n      <Autosuggest\n        required\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    artist: state.form.artist\n  };\n};\n\nconst connectedArtist = connect(mapStateToProps)(Artists);\nexport default connectedArtist;\n"]},"metadata":{},"sourceType":"module"}