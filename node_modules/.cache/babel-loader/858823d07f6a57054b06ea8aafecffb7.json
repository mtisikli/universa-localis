{"ast":null,"code":"import _classCallCheck from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/macbookpro/Desktop/first-project/client/src/components/Main.js\";\nimport React from \"react\";\nimport Autosuggest from \"react-autosuggest\"; // Imagine you have a list of languages that you'd like to autosuggest.\n\nvar artists = [{\n  name: \"Alican Akyüz\"\n}, {\n  name: \"Tolga Akyüz\"\n}, {\n  name: \"Mehmet Tansu Işıklı\"\n}]; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nvar getSuggestions = function getSuggestions(value) {\n  var inputValue = value.trim().toLowerCase();\n  var inputLength = inputValue.length;\n  return inputLength === 0 ? [] : artists.filter(function (lang) {\n    return lang.name.toLowerCase().slice(0, inputLength) === inputValue;\n  });\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nvar getSuggestionValue = function getSuggestionValue(suggestion) {\n  return suggestion.name;\n}; // Use your imagination to render suggestions.\n\n\nvar renderSuggestion = function renderSuggestion(suggestion) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, suggestion.name);\n};\n\nvar Main =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Main, _React$Component);\n\n  function Main() {\n    var _this;\n\n    _classCallCheck(this, Main);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Main).call(this)); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    _this.onChange = function (event, _ref) {\n      var newValue = _ref.newValue;\n\n      _this.setState({\n        value: newValue\n      });\n    };\n\n    _this.onSuggestionsFetchRequested = function (_ref2) {\n      var value = _ref2.value;\n\n      _this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    _this.onSuggestionsClearRequested = function () {\n      _this.setState({\n        suggestions: []\n      });\n    };\n\n    _this.state = {\n      value: \"\",\n      suggestions: []\n    };\n    return _this;\n  }\n\n  _createClass(Main, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions; // Autosuggest will pass through all these props to the input.\n\n      var inputProps = {\n        placeholder: \"Type a programming language\",\n        value: value,\n        onChange: this.onChange\n      }; // Finally, render it!\n\n      return React.createElement(Autosuggest, {\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        inputProps: inputProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Main;\n}(React.Component);\n\nexport default Main;","map":{"version":3,"sources":["/Users/macbookpro/Desktop/first-project/client/src/components/Main.js"],"names":["React","Autosuggest","artists","name","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","Main","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","inputProps","placeholder","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB,C,CAEA;;AACA,IAAMC,OAAO,GAAG,CACd;AACEC,EAAAA,IAAI,EAAE;AADR,CADc,EAId;AACEA,EAAAA,IAAI,EAAE;AADR,CAJc,EAOd;AACEA,EAAAA,IAAI,EAAE;AADR,CAPc,CAAhB,C,CAYA;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK,EAAI;AAC9B,MAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,WAAb,EAAnB;AACA,MAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AAEA,SAAOD,WAAW,KAAK,CAAhB,GACH,EADG,GAEHP,OAAO,CAACS,MAAR,CACE,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACT,IAAL,CAAUK,WAAV,GAAwBK,KAAxB,CAA8B,CAA9B,EAAiCJ,WAAjC,MAAkDH,UAAtD;AAAA,GADN,CAFJ;AAKD,CATD,C,CAWA;AACA;AACA;;;AACA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,UAAU;AAAA,SAAIA,UAAU,CAACZ,IAAf;AAAA,CAArC,C,CAEA;;;AACA,IAAMa,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAD,UAAU;AAAA,SAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,UAAU,CAACZ,IAAjB,CAAJ;AAAA,CAAnC;;IAEMc,I;;;;;AACJ,kBAAc;AAAA;;AAAA;;AACZ,+EADY,CAGZ;AACA;AACA;AACA;AACA;;AAPY,UAcdC,QAdc,GAcH,UAACC,KAAD,QAAyB;AAAA,UAAfC,QAAe,QAAfA,QAAe;;AAClC,YAAKC,QAAL,CAAc;AACZhB,QAAAA,KAAK,EAAEe;AADK,OAAd;AAGD,KAlBa;;AAAA,UAsBdE,2BAtBc,GAsBgB,iBAAe;AAAA,UAAZjB,KAAY,SAAZA,KAAY;;AAC3C,YAAKgB,QAAL,CAAc;AACZE,QAAAA,WAAW,EAAEnB,cAAc,CAACC,KAAD;AADf,OAAd;AAGD,KA1Ba;;AAAA,UA6BdmB,2BA7Bc,GA6BgB,YAAM;AAClC,YAAKH,QAAL,CAAc;AACZE,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KAjCa;;AAQZ,UAAKE,KAAL,GAAa;AACXpB,MAAAA,KAAK,EAAE,EADI;AAEXkB,MAAAA,WAAW,EAAE;AAFF,KAAb;AARY;AAYb;;;;6BAuBQ;AAAA,wBACwB,KAAKE,KAD7B;AAAA,UACCpB,KADD,eACCA,KADD;AAAA,UACQkB,WADR,eACQA,WADR,EAGP;;AACA,UAAMG,UAAU,GAAG;AACjBC,QAAAA,WAAW,EAAE,6BADI;AAEjBtB,QAAAA,KAAK,EAALA,KAFiB;AAGjBa,QAAAA,QAAQ,EAAE,KAAKA;AAHE,OAAnB,CAJO,CAUP;;AACA,aACE,oBAAC,WAAD;AACE,QAAA,WAAW,EAAEK,WADf;AAEE,QAAA,2BAA2B,EAAE,KAAKD,2BAFpC;AAGE,QAAA,2BAA2B,EAAE,KAAKE,2BAHpC;AAIE,QAAA,kBAAkB,EAAEV,kBAJtB;AAKE,QAAA,gBAAgB,EAAEE,gBALpB;AAME,QAAA,UAAU,EAAEU,UANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAUD;;;;EAzDgB1B,KAAK,CAAC4B,S;;AA4DzB,eAAeX,IAAf","sourcesContent":["import React from \"react\";\nimport Autosuggest from \"react-autosuggest\";\n\n// Imagine you have a list of languages that you'd like to autosuggest.\nconst artists = [\n  {\n    name: \"Alican Akyüz\"\n  },\n  {\n    name: \"Tolga Akyüz\"\n  },\n  {\n    name: \"Mehmet Tansu Işıklı\"\n  }\n];\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0\n    ? []\n    : artists.filter(\n        lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue\n      );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.name;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => <div>{suggestion.name}</div>;\n\nclass Main extends React.Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: \"\",\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: \"Type a programming language\",\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}