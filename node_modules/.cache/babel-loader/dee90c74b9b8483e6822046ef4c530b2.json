{"ast":null,"code":"import { SUBMITTED, FETCH_SUCCESS, FETCH_FAILURE, SELECT_OPEN, SELECT_CLOSE, MRP_NAME_UPDATE, MRP_DATE_UPDATE, IVL_KEY_UPDATE, IVL_YEAR_UPDATE, TECHPORT_ID_UPDATE, TECHPORT_DATE_UPDATE, SHOW_RESULT } from \"./action_types\"; //  APOD  ////////////////////////////////////////////////////\n\nexport function getApod() {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/apod\").then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var received = {\n        artist: data.copyright,\n        title: data.title,\n        date: data.date,\n        explanation: data.explanation,\n        link: data.url,\n        media_type: data.media_type\n      };\n      dispatch(fetchSuccess());\n      dispatch(showResult(received));\n    }).catch(function (error) {\n      dispatch(fetchFailure());\n      console.error(\"Error:\", error);\n    });\n  };\n} //  MRP  ////////////////////////////////////////////////////\n\nexport function onOpen() {\n  return function (dispatch) {\n    dispatch({\n      type: SELECT_OPEN,\n      payload: true\n    });\n  };\n}\nexport function onClose() {\n  return function (dispatch) {\n    dispatch({\n      type: SELECT_CLOSE,\n      payload: false\n    });\n  };\n}\nexport function mrpNameUpdate(name) {\n  return function (dispatch) {\n    dispatch({\n      type: MRP_NAME_UPDATE,\n      payload: name\n    });\n  };\n}\nexport function mrpDateUpdate(date) {\n  return function (dispatch) {\n    dispatch({\n      type: MRP_DATE_UPDATE,\n      payload: date\n    });\n  };\n}\nexport function getMrp() {\n  return function (dispatch, getState) {\n    var state = getState().FormReducer.mrpForm;\n    var sent = {\n      name: state.name,\n      date: state.date\n    };\n    var endpoint = \"https://api.nasa.gov/mars-photos/api/v1/rovers/\".concat(sent.name, \"/photos?earth_date=\").concat(sent.date, \"&api_key=1bLpXwhcARlJOhP0k9rQ0PBxWtO7JJRflDIeg16p\");\n    fetch(endpoint).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var received = {\n        name: data.photos.map(function (e) {\n          return e.rover.name;\n        }),\n        earth_date: data.photos.map(function (e) {\n          return e.earth_date;\n        }),\n        photos: data.photos\n      };\n      console.log(received);\n      dispatch(fetchSuccess());\n      dispatch(showResult(received));\n    }).catch(function (error) {\n      dispatch(fetchFailure());\n      console.error(\"Error:\", error);\n    });\n  };\n} //  IVL  ////////////////////////////////////////////////////\n\nexport function ivlKeyUpdate(keyword) {\n  return function (dispatch) {\n    dispatch({\n      type: IVL_KEY_UPDATE,\n      payload: keyword\n    });\n  };\n}\nexport function ivlYearUpdate(year) {\n  return function (dispatch) {\n    dispatch({\n      type: IVL_YEAR_UPDATE,\n      payload: year\n    });\n  };\n}\nexport function getIvl() {\n  return function (dispatch, getState) {\n    var state = getState().FormReducer.ivlForm;\n    var sent = {\n      keyword: state.keyword,\n      year: state.year\n    };\n    var endpoint = \"https://images-api.nasa.gov/search?q=\".concat(sent.keyword, \"%\").concat(sent.year);\n    fetch(endpoint).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var received = {\n        info: data.collection.items.map(function (i) {\n          return i;\n        })\n      };\n      console.log(received);\n      dispatch(fetchSuccess());\n      dispatch(showResult(received));\n    }).catch(function (error) {\n      dispatch(fetchFailure());\n      console.error(\"Error:\", error);\n    });\n  };\n} //  TECHPORT  ////////////////////////////////////////////////////\n\nexport function techportIdUpdate(id) {\n  return function (dispatch) {\n    dispatch({\n      type: TECHPORT_ID_UPDATE,\n      payload: id\n    });\n  };\n}\nexport function techportDateUpdate(date) {\n  return function (dispatch) {\n    dispatch({\n      type: TECHPORT_DATE_UPDATE,\n      payload: date\n    });\n  };\n}\nexport function getTechport() {\n  return function (dispatch) {\n    fetch(\"https://api.nasa.gov/techport/api/projects?api_key=1bLpXwhcARlJOhP0k9rQ0PBxWtO7JJRflDIeg16p\").then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var receivedIds = {\n        id: data.projects.projects.map(function (i) {\n          return i.id;\n        })\n      };\n      console.log(receivedIds);\n      dispatch(techportFetch(receivedIds));\n    }).catch(function (error) {\n      console.error(\"Error:\", error);\n    });\n  };\n}\nexport function techportFetch(receivedIds) {\n  return function (dispatch) {\n    var idParams = receivedIds.id[Math.floor(Math.random() * receivedIds.id.length)];\n    fetch(\"https://api.nasa.gov/techport/api/projects/\".concat(idParams, \"?api_key=1bLpXwhcARlJOhP0k9rQ0PBxWtO7JJRflDIeg16p\")).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var received = {\n        title: data.project.title,\n        workLocation: data.project.workLocations.workLocation,\n        endDate: data.project.endDate,\n        img_src1: data.project.library.libraryItem[1].files.file.url,\n        img_src2: data.project.library.libraryItem[0].files.file.url,\n        description: data.project.description,\n        benefits: data.project.benefits\n      };\n      console.log(received);\n      dispatch(showResult(received));\n    }).catch(function (error) {\n      console.error(\"Error:\", error);\n    });\n  };\n} /////////////////////////////////////////////////////////////////\n\nexport function showResult(received) {\n  return function (dispatch) {\n    dispatch({\n      type: SHOW_RESULT,\n      payload: true,\n      receivedInfo: received\n    });\n  };\n}\nexport function submitted() {\n  return function (dispatch) {\n    dispatch({\n      type: SUBMITTED,\n      payload: true\n    });\n  };\n}\nexport function fetchSuccess() {\n  return function (dispatch) {\n    dispatch({\n      type: FETCH_SUCCESS,\n      payload: true\n    });\n  };\n}\nexport function fetchFailure() {\n  return function (dispatch) {\n    dispatch({\n      type: FETCH_FAILURE,\n      payload: true\n    });\n  };\n}","map":{"version":3,"sources":["/Users/macbookpro/Desktop/universa_localis/src/actions/formActions/actions.js"],"names":["SUBMITTED","FETCH_SUCCESS","FETCH_FAILURE","SELECT_OPEN","SELECT_CLOSE","MRP_NAME_UPDATE","MRP_DATE_UPDATE","IVL_KEY_UPDATE","IVL_YEAR_UPDATE","TECHPORT_ID_UPDATE","TECHPORT_DATE_UPDATE","SHOW_RESULT","getApod","dispatch","fetch","then","response","json","data","received","artist","copyright","title","date","explanation","link","url","media_type","fetchSuccess","showResult","catch","error","fetchFailure","console","onOpen","type","payload","onClose","mrpNameUpdate","name","mrpDateUpdate","getMrp","getState","state","FormReducer","mrpForm","sent","endpoint","photos","map","e","rover","earth_date","log","ivlKeyUpdate","keyword","ivlYearUpdate","year","getIvl","ivlForm","info","collection","items","i","techportIdUpdate","id","techportDateUpdate","getTechport","receivedIds","projects","techportFetch","idParams","Math","floor","random","length","project","workLocation","workLocations","endDate","img_src1","library","libraryItem","files","file","img_src2","description","benefits","receivedInfo","submitted"],"mappings":"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","sourcesContent":["import {\n  SUBMITTED,\n  FETCH_SUCCESS,\n  FETCH_FAILURE,\n  SELECT_OPEN,\n  SELECT_CLOSE,\n  MRP_NAME_UPDATE,\n  MRP_DATE_UPDATE,\n  IVL_KEY_UPDATE,\n  IVL_YEAR_UPDATE,\n  TECHPORT_ID_UPDATE,\n  TECHPORT_DATE_UPDATE,\n  SHOW_RESULT\n} from \"./action_types\";\n\n//  APOD  ////////////////////////////////////////////////////\n\nexport function getApod() {\n  return function(dispatch) {\n    fetch(\"http://localhost:3000/apod\")\n      .then(response => response.json())\n      .then(data => {\n        const received = {\n          artist: data.copyright,\n          title: data.title,\n          date: data.date,\n          explanation: data.explanation,\n          link: data.url,\n          media_type: data.media_type\n        };\n        dispatch(fetchSuccess());\n        dispatch(showResult(received));\n      })\n      .catch(error => {\n        dispatch(fetchFailure());\n        console.error(\"Error:\", error);\n      });\n  };\n}\n\n//  MRP  ////////////////////////////////////////////////////\n\nexport function onOpen() {\n  return function(dispatch) {\n    dispatch({\n      type: SELECT_OPEN,\n      payload: true\n    });\n  };\n}\nexport function onClose() {\n  return function(dispatch) {\n    dispatch({\n      type: SELECT_CLOSE,\n      payload: false\n    });\n  };\n}\n\nexport function mrpNameUpdate(name) {\n  return function(dispatch) {\n    dispatch({\n      type: MRP_NAME_UPDATE,\n      payload: name\n    });\n  };\n}\n\nexport function mrpDateUpdate(date) {\n  return function(dispatch) {\n    dispatch({\n      type: MRP_DATE_UPDATE,\n      payload: date\n    });\n  };\n}\n\nexport function getMrp() {\n  return function(dispatch, getState) {\n    const state = getState().FormReducer.mrpForm;\n    const sent = {\n      name: state.name,\n      date: state.date\n    };\n    const endpoint = `https://api.nasa.gov/mars-photos/api/v1/rovers/${\n      sent.name\n    }/photos?earth_date=${\n      sent.date\n    }&api_key=1bLpXwhcARlJOhP0k9rQ0PBxWtO7JJRflDIeg16p`;\n\n    fetch(endpoint)\n      .then(response => response.json())\n      .then(data => {\n        const received = {\n          name: data.photos.map(e => e.rover.name),\n          earth_date: data.photos.map(e => e.earth_date),\n          photos: data.photos\n        };\n        console.log(received);\n        dispatch(fetchSuccess());\n        dispatch(showResult(received));\n      })\n      .catch(error => {\n        dispatch(fetchFailure());\n        console.error(\"Error:\", error);\n      });\n  };\n}\n\n//  IVL  ////////////////////////////////////////////////////\n\nexport function ivlKeyUpdate(keyword) {\n  return function(dispatch) {\n    dispatch({\n      type: IVL_KEY_UPDATE,\n      payload: keyword\n    });\n  };\n}\n\nexport function ivlYearUpdate(year) {\n  return function(dispatch) {\n    dispatch({\n      type: IVL_YEAR_UPDATE,\n      payload: year\n    });\n  };\n}\n\nexport function getIvl() {\n  return function(dispatch, getState) {\n    const state = getState().FormReducer.ivlForm;\n    const sent = {\n      keyword: state.keyword,\n      year: state.year\n    };\n    const endpoint = `https://images-api.nasa.gov/search?q=${sent.keyword}%${\n      sent.year\n    }`;\n\n    fetch(endpoint)\n      .then(response => response.json())\n      .then(data => {\n        const received = {\n          info: data.collection.items.map(i => i)\n        };\n        console.log(received);\n        dispatch(fetchSuccess());\n        dispatch(showResult(received));\n      })\n      .catch(error => {\n        dispatch(fetchFailure());\n        console.error(\"Error:\", error);\n      });\n  };\n}\n\n//  TECHPORT  ////////////////////////////////////////////////////\n\nexport function techportIdUpdate(id) {\n  return function(dispatch) {\n    dispatch({\n      type: TECHPORT_ID_UPDATE,\n      payload: id\n    });\n  };\n}\n\nexport function techportDateUpdate(date) {\n  return function(dispatch) {\n    dispatch({\n      type: TECHPORT_DATE_UPDATE,\n      payload: date\n    });\n  };\n}\n\nexport function getTechport() {\n  return function(dispatch) {\n    fetch(\n      \"https://api.nasa.gov/techport/api/projects?api_key=1bLpXwhcARlJOhP0k9rQ0PBxWtO7JJRflDIeg16p\"\n    )\n      .then(response => response.json())\n      .then(data => {\n        const receivedIds = {\n          id: data.projects.projects.map(i => i.id)\n        };\n        console.log(receivedIds);\n        dispatch(techportFetch(receivedIds));\n      })\n      .catch(error => {\n        console.error(\"Error:\", error);\n      });\n  };\n}\n\nexport function techportFetch(receivedIds) {\n  return function(dispatch) {\n    const idParams =\n      receivedIds.id[Math.floor(Math.random() * receivedIds.id.length)];\n    fetch(\n      `https://api.nasa.gov/techport/api/projects/${idParams}?api_key=1bLpXwhcARlJOhP0k9rQ0PBxWtO7JJRflDIeg16p`\n    )\n      .then(response => response.json())\n      .then(data => {\n        const received = {\n          title: data.project.title,\n          workLocation: data.project.workLocations.workLocation,\n          endDate: data.project.endDate,\n          img_src1: data.project.library.libraryItem[1].files.file.url,\n          img_src2: data.project.library.libraryItem[0].files.file.url,\n          description: data.project.description,\n          benefits: data.project.benefits\n        };\n        console.log(received);\n        dispatch(showResult(received));\n      })\n      .catch(error => {\n        console.error(\"Error:\", error);\n      });\n  };\n}\n\n/////////////////////////////////////////////////////////////////\n\nexport function showResult(received) {\n  return function(dispatch) {\n    dispatch({\n      type: SHOW_RESULT,\n      payload: true,\n      receivedInfo: received\n    });\n  };\n}\n\nexport function submitted() {\n  return function(dispatch) {\n    dispatch({\n      type: SUBMITTED,\n      payload: true\n    });\n  };\n}\n\nexport function fetchSuccess() {\n  return function(dispatch) {\n    dispatch({\n      type: FETCH_SUCCESS,\n      payload: true\n    });\n  };\n}\n\nexport function fetchFailure() {\n  return function(dispatch) {\n    dispatch({\n      type: FETCH_FAILURE,\n      payload: true\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}