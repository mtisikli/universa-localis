{"ast":null,"code":"import { SUBMITTED, FETCH_SUCCESS, FETCH_FAILURE, SHOW_APOD, MRP_SELECT_OPEN, MRP_SELECT_CLOSE, MRP_NAME_UPDATE, MRP_DATE_UPDATE, MRP_SUBMITTED, SHOW_MRP } from \"./action_types\"; //  APOD  ////////////////////////////////////////////////////\n\nexport function getApod() {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/apod\").then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var received = {\n        artist: data.copyright,\n        title: data.title,\n        date: data.date,\n        explanation: data.explanation,\n        link: data.url\n      };\n      dispatch(fetchSuccess());\n      dispatch(showApod(received));\n    }).catch(function (error) {\n      dispatch(fetchFailure());\n      console.error(\"Error:\", error);\n    });\n  };\n}\nexport function showApod(received) {\n  return function (dispatch) {\n    dispatch({\n      type: SHOW_APOD,\n      payload: true,\n      receivedObject: received\n    });\n  };\n} //  MRP  ////////////////////////////////////////////////////\n\nexport function onMrpOpen() {\n  return function (dispatch) {\n    dispatch({\n      type: MRP_SELECT_OPEN,\n      payload: true\n    });\n  };\n}\nexport function onMrpClose() {\n  return function (dispatch) {\n    dispatch({\n      type: MRP_SELECT_CLOSE,\n      payload: false\n    });\n  };\n}\nexport function mrpNameUpdate(name) {\n  return function (dispatch) {\n    dispatch({\n      type: MRP_NAME_UPDATE,\n      payload: name\n    });\n  };\n}\nexport function mrpDateUpdate(date) {\n  return function (dispatch) {\n    dispatch({\n      type: MRP_DATE_UPDATE,\n      payload: date\n    });\n  };\n}\nexport function getMrp() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: MRP_SUBMITTED,\n      payload: true\n    });\n    var state = getState().FormReducer.mrpForm;\n    var sent = {\n      name: state.name,\n      date: state.date\n    };\n    var endpoint = \"https://api.nasa.gov/mars-photos/api/v1/rovers/\".concat(sent.name, \"/photos?earth_date=\").concat(sent.date, \"&api_key=1bLpXwhcARlJOhP0k9rQ0PBxWtO7JJRflDIeg16p\");\n    fetch(endpoint).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var mapping = data.photos.forEach(function (e) {\n        return e;\n      });\n      var received = {\n        name: data.photos(mapping).rover.name,\n        earth_date: data.forEach().earth_date,\n        camera: data.photos.forEach().camera.full_name,\n        link: data.photos.forEach().img_src\n      };\n      console.log(received);\n      dispatch(fetchSuccess());\n      dispatch(showMrp(received));\n    }).catch(function (error) {\n      dispatch(fetchFailure());\n      console.error(\"Error:\", error);\n    });\n  };\n}\nexport function showMrp(received) {\n  return function (dispatch) {\n    dispatch({\n      type: SHOW_MRP,\n      payload: true,\n      receivedObject: received\n    });\n  };\n}\nexport function submitted() {\n  return function (dispatch) {\n    dispatch({\n      type: SUBMITTED,\n      payload: true\n    });\n  };\n}\nexport function fetchSuccess() {\n  return function (dispatch) {\n    dispatch({\n      type: FETCH_SUCCESS,\n      payload: true\n    });\n  };\n}\nexport function fetchFailure() {\n  return function (dispatch) {\n    dispatch({\n      type: FETCH_FAILURE,\n      payload: true\n    });\n  };\n}","map":{"version":3,"sources":["/Users/macbookpro/Desktop/universa_localis/src/actions/formActions/actions.js"],"names":["SUBMITTED","FETCH_SUCCESS","FETCH_FAILURE","SHOW_APOD","MRP_SELECT_OPEN","MRP_SELECT_CLOSE","MRP_NAME_UPDATE","MRP_DATE_UPDATE","MRP_SUBMITTED","SHOW_MRP","getApod","dispatch","fetch","then","response","json","data","received","artist","copyright","title","date","explanation","link","url","fetchSuccess","showApod","catch","error","fetchFailure","console","type","payload","receivedObject","onMrpOpen","onMrpClose","mrpNameUpdate","name","mrpDateUpdate","getMrp","getState","state","FormReducer","mrpForm","sent","endpoint","mapping","photos","forEach","e","rover","earth_date","camera","full_name","img_src","log","showMrp","submitted"],"mappings":"AAAA,SACEA,SADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,SAJF,EAKEC,eALF,EAMEC,gBANF,EAOEC,eAPF,EAQEC,eARF,EASEC,aATF,EAUEC,QAVF,QAWO,gBAXP,C,CAaA;;AAEA,OAAO,SAASC,OAAT,GAAmB;AACxB,SAAO,UAASC,QAAT,EAAmB;AACxBC,IAAAA,KAAK,CAAC,4BAAD,CAAL,CACGC,IADH,CACQ,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KADhB,EAEGF,IAFH,CAEQ,UAAAG,IAAI,EAAI;AACZ,UAAMC,QAAQ,GAAG;AACfC,QAAAA,MAAM,EAAEF,IAAI,CAACG,SADE;AAEfC,QAAAA,KAAK,EAAEJ,IAAI,CAACI,KAFG;AAGfC,QAAAA,IAAI,EAAEL,IAAI,CAACK,IAHI;AAIfC,QAAAA,WAAW,EAAEN,IAAI,CAACM,WAJH;AAKfC,QAAAA,IAAI,EAAEP,IAAI,CAACQ;AALI,OAAjB;AAOAb,MAAAA,QAAQ,CAACc,YAAY,EAAb,CAAR;AACAd,MAAAA,QAAQ,CAACe,QAAQ,CAACT,QAAD,CAAT,CAAR;AACD,KAZH,EAaGU,KAbH,CAaS,UAAAC,KAAK,EAAI;AACdjB,MAAAA,QAAQ,CAACkB,YAAY,EAAb,CAAR;AACAC,MAAAA,OAAO,CAACF,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACD,KAhBH;AAiBD,GAlBD;AAmBD;AAED,OAAO,SAASF,QAAT,CAAkBT,QAAlB,EAA4B;AACjC,SAAO,UAASN,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAAC;AACPoB,MAAAA,IAAI,EAAE5B,SADC;AAEP6B,MAAAA,OAAO,EAAE,IAFF;AAGPC,MAAAA,cAAc,EAAEhB;AAHT,KAAD,CAAR;AAKD,GAND;AAOD,C,CAED;;AAEA,OAAO,SAASiB,SAAT,GAAqB;AAC1B,SAAO,UAASvB,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAAC;AACPoB,MAAAA,IAAI,EAAE3B,eADC;AAEP4B,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GALD;AAMD;AACD,OAAO,SAASG,UAAT,GAAsB;AAC3B,SAAO,UAASxB,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAAC;AACPoB,MAAAA,IAAI,EAAE1B,gBADC;AAEP2B,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GALD;AAMD;AAED,OAAO,SAASI,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,SAAO,UAAS1B,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAAC;AACPoB,MAAAA,IAAI,EAAEzB,eADC;AAEP0B,MAAAA,OAAO,EAAEK;AAFF,KAAD,CAAR;AAID,GALD;AAMD;AAED,OAAO,SAASC,aAAT,CAAuBjB,IAAvB,EAA6B;AAClC,SAAO,UAASV,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAAC;AACPoB,MAAAA,IAAI,EAAExB,eADC;AAEPyB,MAAAA,OAAO,EAAEX;AAFF,KAAD,CAAR;AAID,GALD;AAMD;AAED,OAAO,SAASkB,MAAT,GAAkB;AACvB,SAAO,UAAS5B,QAAT,EAAmB6B,QAAnB,EAA6B;AAClC7B,IAAAA,QAAQ,CAAC;AACPoB,MAAAA,IAAI,EAAEvB,aADC;AAEPwB,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAIA,QAAMS,KAAK,GAAGD,QAAQ,GAAGE,WAAX,CAAuBC,OAArC;AACA,QAAMC,IAAI,GAAG;AACXP,MAAAA,IAAI,EAAEI,KAAK,CAACJ,IADD;AAEXhB,MAAAA,IAAI,EAAEoB,KAAK,CAACpB;AAFD,KAAb;AAIA,QAAMwB,QAAQ,4DACZD,IAAI,CAACP,IADO,gCAGZO,IAAI,CAACvB,IAHO,sDAAd;AAMAT,IAAAA,KAAK,CAACiC,QAAD,CAAL,CACGhC,IADH,CACQ,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KADhB,EAEGF,IAFH,CAEQ,UAAAG,IAAI,EAAI;AACZ,UAAM8B,OAAO,GAAG9B,IAAI,CAAC+B,MAAL,CAAYC,OAAZ,CAAoB,UAASC,CAAT,EAAY;AAC9C,eAAOA,CAAP;AACD,OAFe,CAAhB;AAGA,UAAMhC,QAAQ,GAAG;AACfoB,QAAAA,IAAI,EAAErB,IAAI,CAAC+B,MAAL,CAAYD,OAAZ,EAAqBI,KAArB,CAA2Bb,IADlB;AAEfc,QAAAA,UAAU,EAAEnC,IAAI,CAACgC,OAAL,GAAeG,UAFZ;AAGfC,QAAAA,MAAM,EAAEpC,IAAI,CAAC+B,MAAL,CAAYC,OAAZ,GAAsBI,MAAtB,CAA6BC,SAHtB;AAIf9B,QAAAA,IAAI,EAAEP,IAAI,CAAC+B,MAAL,CAAYC,OAAZ,GAAsBM;AAJb,OAAjB;AAMAxB,MAAAA,OAAO,CAACyB,GAAR,CAAYtC,QAAZ;AACAN,MAAAA,QAAQ,CAACc,YAAY,EAAb,CAAR;AACAd,MAAAA,QAAQ,CAAC6C,OAAO,CAACvC,QAAD,CAAR,CAAR;AACD,KAfH,EAgBGU,KAhBH,CAgBS,UAAAC,KAAK,EAAI;AACdjB,MAAAA,QAAQ,CAACkB,YAAY,EAAb,CAAR;AACAC,MAAAA,OAAO,CAACF,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACD,KAnBH;AAoBD,GApCD;AAqCD;AAED,OAAO,SAAS4B,OAAT,CAAiBvC,QAAjB,EAA2B;AAChC,SAAO,UAASN,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAAC;AACPoB,MAAAA,IAAI,EAAEtB,QADC;AAEPuB,MAAAA,OAAO,EAAE,IAFF;AAGPC,MAAAA,cAAc,EAAEhB;AAHT,KAAD,CAAR;AAKD,GAND;AAOD;AAED,OAAO,SAASwC,SAAT,GAAqB;AAC1B,SAAO,UAAS9C,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAAC;AACPoB,MAAAA,IAAI,EAAE/B,SADC;AAEPgC,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GALD;AAMD;AAED,OAAO,SAASP,YAAT,GAAwB;AAC7B,SAAO,UAASd,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAAC;AACPoB,MAAAA,IAAI,EAAE9B,aADC;AAEP+B,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GALD;AAMD;AAED,OAAO,SAASH,YAAT,GAAwB;AAC7B,SAAO,UAASlB,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAAC;AACPoB,MAAAA,IAAI,EAAE7B,aADC;AAEP8B,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GALD;AAMD","sourcesContent":["import {\n  SUBMITTED,\n  FETCH_SUCCESS,\n  FETCH_FAILURE,\n  SHOW_APOD,\n  MRP_SELECT_OPEN,\n  MRP_SELECT_CLOSE,\n  MRP_NAME_UPDATE,\n  MRP_DATE_UPDATE,\n  MRP_SUBMITTED,\n  SHOW_MRP\n} from \"./action_types\";\n\n//  APOD  ////////////////////////////////////////////////////\n\nexport function getApod() {\n  return function(dispatch) {\n    fetch(\"http://localhost:3000/apod\")\n      .then(response => response.json())\n      .then(data => {\n        const received = {\n          artist: data.copyright,\n          title: data.title,\n          date: data.date,\n          explanation: data.explanation,\n          link: data.url\n        };\n        dispatch(fetchSuccess());\n        dispatch(showApod(received));\n      })\n      .catch(error => {\n        dispatch(fetchFailure());\n        console.error(\"Error:\", error);\n      });\n  };\n}\n\nexport function showApod(received) {\n  return function(dispatch) {\n    dispatch({\n      type: SHOW_APOD,\n      payload: true,\n      receivedObject: received\n    });\n  };\n}\n\n//  MRP  ////////////////////////////////////////////////////\n\nexport function onMrpOpen() {\n  return function(dispatch) {\n    dispatch({\n      type: MRP_SELECT_OPEN,\n      payload: true\n    });\n  };\n}\nexport function onMrpClose() {\n  return function(dispatch) {\n    dispatch({\n      type: MRP_SELECT_CLOSE,\n      payload: false\n    });\n  };\n}\n\nexport function mrpNameUpdate(name) {\n  return function(dispatch) {\n    dispatch({\n      type: MRP_NAME_UPDATE,\n      payload: name\n    });\n  };\n}\n\nexport function mrpDateUpdate(date) {\n  return function(dispatch) {\n    dispatch({\n      type: MRP_DATE_UPDATE,\n      payload: date\n    });\n  };\n}\n\nexport function getMrp() {\n  return function(dispatch, getState) {\n    dispatch({\n      type: MRP_SUBMITTED,\n      payload: true\n    });\n    const state = getState().FormReducer.mrpForm;\n    const sent = {\n      name: state.name,\n      date: state.date\n    };\n    const endpoint = `https://api.nasa.gov/mars-photos/api/v1/rovers/${\n      sent.name\n    }/photos?earth_date=${\n      sent.date\n    }&api_key=1bLpXwhcARlJOhP0k9rQ0PBxWtO7JJRflDIeg16p`;\n\n    fetch(endpoint)\n      .then(response => response.json())\n      .then(data => {\n        const mapping = data.photos.forEach(function(e) {\n          return e;\n        });\n        const received = {\n          name: data.photos(mapping).rover.name,\n          earth_date: data.forEach().earth_date,\n          camera: data.photos.forEach().camera.full_name,\n          link: data.photos.forEach().img_src\n        };\n        console.log(received);\n        dispatch(fetchSuccess());\n        dispatch(showMrp(received));\n      })\n      .catch(error => {\n        dispatch(fetchFailure());\n        console.error(\"Error:\", error);\n      });\n  };\n}\n\nexport function showMrp(received) {\n  return function(dispatch) {\n    dispatch({\n      type: SHOW_MRP,\n      payload: true,\n      receivedObject: received\n    });\n  };\n}\n\nexport function submitted() {\n  return function(dispatch) {\n    dispatch({\n      type: SUBMITTED,\n      payload: true\n    });\n  };\n}\n\nexport function fetchSuccess() {\n  return function(dispatch) {\n    dispatch({\n      type: FETCH_SUCCESS,\n      payload: true\n    });\n  };\n}\n\nexport function fetchFailure() {\n  return function(dispatch) {\n    dispatch({\n      type: FETCH_FAILURE,\n      payload: true\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}