{"ast":null,"code":"import _classCallCheck from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/macbookpro/Desktop/first-project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/macbookpro/Desktop/first-project/client/src/components/Main.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./TextFields/Main.css\";\nimport Autosuggest from \"react-autosuggest\";\nimport Button from \"@material-ui/core/Button\";\nimport { Artists, Movements, Centuries, Branches } from \"./TextFields/Suggestions\";\nimport { artistUpdate, movementUpdate, centuryUpdate, branchUpdate, fetchStart } from \"../Actions/Actions\";\n\nvar getSuggestions = function getSuggestions(value, getState) {\n  var inputValue = value.trim().toLowerCase();\n  var inputLength = inputValue.length;\n  return inputLength === 0 ? [] : Artists.filter(function (lang) {\n    return lang.name.toLowerCase().slice(0, inputLength) === inputValue;\n  });\n};\n\nvar getSuggestionValue = function getSuggestionValue(suggestion) {\n  return suggestion.name;\n};\n\nvar renderSuggestion = function renderSuggestion(suggestion) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, suggestion.name);\n};\n\nvar Main =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Main, _Component);\n\n  function Main(props) {\n    var _this;\n\n    _classCallCheck(this, Main);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Main).call(this, props));\n\n    _this.onClick = function (event, _ref) {\n      var newValue = _ref.newValue;\n\n      _this.setState({\n        value: newValue\n      });\n    };\n\n    _this.onChange = function (event, _ref2) {\n      var newValue = _ref2.newValue;\n\n      if (event.target.name === \"artist\") {\n        _this.props.dispatch(artistUpdate(newValue));\n      }\n\n      if (event.target.name === \"movement\") {\n        _this.props.dispatch(movementUpdate(newValue));\n      }\n\n      if (event.target.name === \"century\") {\n        _this.props.dispatch(centuryUpdate(newValue));\n      }\n\n      if (event.target.name === \"branch\") {\n        _this.props.dispatch(branchUpdate(newValue));\n      }\n    };\n\n    _this.onSuggestionsFetchRequested = function (_ref3) {\n      var value = _ref3.value;\n\n      _this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    _this.onSuggestionsClearRequested = function () {\n      _this.setState({\n        suggestions: []\n      });\n    };\n\n    _this.state = {\n      value: \"\",\n      suggestions: []\n    };\n    return _this;\n  }\n\n  _createClass(Main, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions; // Autosuggest will pass through all these props to the input.\n\n      var inputProps = {\n        placeholder: \"Search Artist\",\n        value: value,\n        onClick: this.onClick\n      };\n      return React.createElement(\"form\", {\n        onSubmit: function onSubmit() {\n          return _this2.props.dispatch(fetchStart());\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Autosuggest, {\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        inputProps: inputProps,\n        name: \"artist\",\n        value: this.props.artist,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        style: {\n          position: \"relative\",\n          bottom: 50\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return Main;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    artist: state.form.artist,\n    movement: state.form.movement,\n    century: state.form.century,\n    branch: state.form.branch\n  };\n};\n\nvar connected = connect(mapStateToProps)(Main);\nexport default connected;","map":{"version":3,"sources":["/Users/macbookpro/Desktop/first-project/client/src/components/Main.js"],"names":["React","Component","connect","Autosuggest","Button","Artists","Movements","Centuries","Branches","artistUpdate","movementUpdate","centuryUpdate","branchUpdate","fetchStart","getSuggestions","value","getState","inputValue","trim","toLowerCase","inputLength","length","filter","lang","name","slice","getSuggestionValue","suggestion","renderSuggestion","Main","props","onClick","event","newValue","setState","onChange","target","dispatch","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","inputProps","placeholder","artist","position","bottom","mapStateToProps","form","movement","century","branch","connected"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./TextFields/Main.css\";\nimport Autosuggest from \"react-autosuggest\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n  Artists,\n  Movements,\n  Centuries,\n  Branches\n} from \"./TextFields/Suggestions\";\n\nimport {\n  artistUpdate,\n  movementUpdate,\n  centuryUpdate,\n  branchUpdate,\n  fetchStart\n} from \"../Actions/Actions\";\n\nconst getSuggestions = (value, getState) => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0\n    ? []\n    : Artists.filter(\n        lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue\n      );\n};\n\nconst getSuggestionValue = suggestion => suggestion.name;\nconst renderSuggestion = suggestion => <div>{suggestion.name}</div>;\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      suggestions: []\n    };\n  }\n\n  onClick = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  onChange = (event, { newValue }) => {\n    if (event.target.name === \"artist\") {\n      this.props.dispatch(artistUpdate(newValue));\n    }\n    if (event.target.name === \"movement\") {\n      this.props.dispatch(movementUpdate(newValue));\n    }\n    if (event.target.name === \"century\") {\n      this.props.dispatch(centuryUpdate(newValue));\n    }\n    if (event.target.name === \"branch\") {\n      this.props.dispatch(branchUpdate(newValue));\n    }\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: \"Search Artist\",\n      value,\n      onClick: this.onClick\n    };\n\n    return (\n      <form onSubmit={() => this.props.dispatch(fetchStart())}>\n        <Autosuggest\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          inputProps={inputProps}\n          name=\"artist\"\n          value={this.props.artist}\n          onChange={this.onChange}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          style={{ position: \"relative\", bottom: 50 }}\n        >\n          Submit\n        </Button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    artist: state.form.artist,\n    movement: state.form.movement,\n    century: state.form.century,\n    branch: state.form.branch\n  };\n};\n\nconst connected = connect(mapStateToProps)(Main);\n\nexport default connected;\n"]},"metadata":{},"sourceType":"module"}