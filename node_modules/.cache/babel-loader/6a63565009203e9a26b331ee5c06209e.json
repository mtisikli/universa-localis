{"ast":null,"code":"import { SUBMITTED, FETCH_SUCCESS, FETCH_FAILURE, SELECT_OPEN, SELECT_CLOSE, MRP_NAME_UPDATE, MRP_DATE_UPDATE, IVL_KEY_UPDATE, IVL_YEAR_UPDATE, SHOW_RESULT } from \"./action_types\"; //  APOD  ////////////////////////////////////////////////////\n\nexport function getApod() {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/apod\").then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var received = {\n        artist: data.copyright,\n        title: data.title,\n        date: data.date,\n        explanation: data.explanation,\n        link: data.url\n      };\n      dispatch(fetchSuccess());\n      dispatch(showResult(received));\n    }).catch(function (error) {\n      dispatch(fetchFailure());\n      console.error(\"Error:\", error);\n    });\n  };\n} //  MRP  ////////////////////////////////////////////////////\n\nexport function onOpen() {\n  return function (dispatch) {\n    dispatch({\n      type: SELECT_OPEN,\n      payload: true\n    });\n  };\n}\nexport function onClose() {\n  return function (dispatch) {\n    dispatch({\n      type: SELECT_CLOSE,\n      payload: false\n    });\n  };\n}\nexport function mrpNameUpdate(name) {\n  return function (dispatch) {\n    dispatch({\n      type: MRP_NAME_UPDATE,\n      payload: name\n    });\n  };\n}\nexport function mrpDateUpdate(date) {\n  return function (dispatch) {\n    dispatch({\n      type: MRP_DATE_UPDATE,\n      payload: date\n    });\n  };\n}\nexport function getMrp() {\n  return function (dispatch, getState) {\n    var state = getState().FormReducer.mrpForm;\n    var sent = {\n      name: state.name,\n      date: state.date\n    };\n    var endpoint = \"https://api.nasa.gov/mars-photos/api/v1/rovers/\".concat(sent.name, \"/photos?earth_date=\").concat(sent.date, \"&api_key=1bLpXwhcARlJOhP0k9rQ0PBxWtO7JJRflDIeg16p\");\n    fetch(endpoint).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var received = {\n        name: data.photos.map(function (e) {\n          return e.rover.name;\n        }),\n        earth_date: data.photos.map(function (e) {\n          return e.earth_date;\n        }),\n        photos: data.photos\n      };\n      console.log(received);\n      dispatch(fetchSuccess());\n      dispatch(showResult(received));\n    }).catch(function (error) {\n      dispatch(fetchFailure());\n      console.error(\"Error:\", error);\n    });\n  };\n} //  IVL  ////////////////////////////////////////////////////\n\nexport function ivlKeyUpdate(keyword) {\n  return function (dispatch) {\n    dispatch({\n      type: IVL_KEY_UPDATE,\n      payload: keyword\n    });\n  };\n}\nexport function ivlYearUpdate(year) {\n  return function (dispatch) {\n    dispatch({\n      type: IVL_YEAR_UPDATE,\n      payload: year\n    });\n  };\n}\nexport function getIvl() {\n  return function (dispatch, getState) {\n    var state = getState().FormReducer.ivlForm;\n    var sent = {\n      key: state.key,\n      year: state.year\n    };\n    var endpoint = \"https://images-api.nasa.gov/search?q=\".concat(sent.key, \"%\").concat(sent.year);\n    fetch(endpoint).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var received = {\n        photos: data.collection.items.map(function (i) {\n          return i.links;\n        })\n      };\n      console.log(received);\n      dispatch(fetchSuccess());\n      dispatch(showResult(received));\n    }).catch(function (error) {\n      dispatch(fetchFailure());\n      console.error(\"Error:\", error);\n    });\n  };\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport function showResult(received) {\n  return function (dispatch) {\n    dispatch({\n      type: SHOW_RESULT,\n      payload: true,\n      receivedinfo: received\n    });\n  };\n}\nexport function submitted() {\n  return function (dispatch) {\n    dispatch({\n      type: SUBMITTED,\n      payload: true\n    });\n  };\n}\nexport function fetchSuccess() {\n  return function (dispatch) {\n    dispatch({\n      type: FETCH_SUCCESS,\n      payload: true\n    });\n  };\n}\nexport function fetchFailure() {\n  return function (dispatch) {\n    dispatch({\n      type: FETCH_FAILURE,\n      payload: true\n    });\n  };\n}","map":{"version":3,"sources":["/Users/macbookpro/Desktop/universa_localis/src/actions/formActions/actions.js"],"names":["SUBMITTED","FETCH_SUCCESS","FETCH_FAILURE","SELECT_OPEN","SELECT_CLOSE","MRP_NAME_UPDATE","MRP_DATE_UPDATE","IVL_KEY_UPDATE","IVL_YEAR_UPDATE","SHOW_RESULT","getApod","dispatch","fetch","then","response","json","data","received","artist","copyright","title","date","explanation","link","url","fetchSuccess","showResult","catch","error","fetchFailure","console","onOpen","type","payload","onClose","mrpNameUpdate","name","mrpDateUpdate","getMrp","getState","state","FormReducer","mrpForm","sent","endpoint","photos","map","e","rover","earth_date","log","ivlKeyUpdate","keyword","ivlYearUpdate","year","getIvl","ivlForm","key","collection","items","i","links","receivedinfo","submitted"],"mappings":"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","sourcesContent":["import {\n  SUBMITTED,\n  FETCH_SUCCESS,\n  FETCH_FAILURE,\n  SELECT_OPEN,\n  SELECT_CLOSE,\n  MRP_NAME_UPDATE,\n  MRP_DATE_UPDATE,\n  IVL_KEY_UPDATE,\n  IVL_YEAR_UPDATE,\n  SHOW_RESULT\n} from \"./action_types\";\n\n//  APOD  ////////////////////////////////////////////////////\n\nexport function getApod() {\n  return function(dispatch) {\n    fetch(\"http://localhost:3000/apod\")\n      .then(response => response.json())\n      .then(data => {\n        const received = {\n          artist: data.copyright,\n          title: data.title,\n          date: data.date,\n          explanation: data.explanation,\n          link: data.url\n        };\n        dispatch(fetchSuccess());\n        dispatch(showResult(received));\n      })\n      .catch(error => {\n        dispatch(fetchFailure());\n        console.error(\"Error:\", error);\n      });\n  };\n}\n\n//  MRP  ////////////////////////////////////////////////////\n\nexport function onOpen() {\n  return function(dispatch) {\n    dispatch({\n      type: SELECT_OPEN,\n      payload: true\n    });\n  };\n}\nexport function onClose() {\n  return function(dispatch) {\n    dispatch({\n      type: SELECT_CLOSE,\n      payload: false\n    });\n  };\n}\n\nexport function mrpNameUpdate(name) {\n  return function(dispatch) {\n    dispatch({\n      type: MRP_NAME_UPDATE,\n      payload: name\n    });\n  };\n}\n\nexport function mrpDateUpdate(date) {\n  return function(dispatch) {\n    dispatch({\n      type: MRP_DATE_UPDATE,\n      payload: date\n    });\n  };\n}\n\nexport function getMrp() {\n  return function(dispatch, getState) {\n    const state = getState().FormReducer.mrpForm;\n    const sent = {\n      name: state.name,\n      date: state.date\n    };\n    const endpoint = `https://api.nasa.gov/mars-photos/api/v1/rovers/${\n      sent.name\n    }/photos?earth_date=${\n      sent.date\n    }&api_key=1bLpXwhcARlJOhP0k9rQ0PBxWtO7JJRflDIeg16p`;\n\n    fetch(endpoint)\n      .then(response => response.json())\n      .then(data => {\n        const received = {\n          name: data.photos.map(e => e.rover.name),\n          earth_date: data.photos.map(e => e.earth_date),\n          photos: data.photos\n        };\n        console.log(received);\n        dispatch(fetchSuccess());\n        dispatch(showResult(received));\n      })\n      .catch(error => {\n        dispatch(fetchFailure());\n        console.error(\"Error:\", error);\n      });\n  };\n}\n\n//  IVL  ////////////////////////////////////////////////////\n\nexport function ivlKeyUpdate(keyword) {\n  return function(dispatch) {\n    dispatch({\n      type: IVL_KEY_UPDATE,\n      payload: keyword\n    });\n  };\n}\n\nexport function ivlYearUpdate(year) {\n  return function(dispatch) {\n    dispatch({\n      type: IVL_YEAR_UPDATE,\n      payload: year\n    });\n  };\n}\n\nexport function getIvl() {\n  return function(dispatch, getState) {\n    const state = getState().FormReducer.ivlForm;\n    const sent = {\n      key: state.key,\n      year: state.year\n    };\n    const endpoint = `https://images-api.nasa.gov/search?q=${sent.key}%${\n      sent.year\n    }`;\n\n    fetch(endpoint)\n      .then(response => response.json())\n      .then(data => {\n        const received = {\n          photos: data.collection.items.map(i => i.links)\n        };\n        console.log(received);\n        dispatch(fetchSuccess());\n        dispatch(showResult(received));\n      })\n      .catch(error => {\n        dispatch(fetchFailure());\n        console.error(\"Error:\", error);\n      });\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport function showResult(received) {\n  return function(dispatch) {\n    dispatch({\n      type: SHOW_RESULT,\n      payload: true,\n      receivedinfo: received\n    });\n  };\n}\n\nexport function submitted() {\n  return function(dispatch) {\n    dispatch({\n      type: SUBMITTED,\n      payload: true\n    });\n  };\n}\n\nexport function fetchSuccess() {\n  return function(dispatch) {\n    dispatch({\n      type: FETCH_SUCCESS,\n      payload: true\n    });\n  };\n}\n\nexport function fetchFailure() {\n  return function(dispatch) {\n    dispatch({\n      type: FETCH_FAILURE,\n      payload: true\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}